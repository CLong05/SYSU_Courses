package org.fisco.bcos.account.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Account extends Contract {
    public static final String[] BINARY_ARRAY = {"","0c1f5790505b509050610c408b611680565b80945081935050506000826000815181101515610c5957fe5b906020019060200201511415610ea557610c7289612adc565b8095508196505050600085141515610cee577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb95507f7fb582f9fa6ce8e095b0bf28d0d61a3b104c418ce55e31d8184f2626fb569647868c8c8c8c604051610cde9594939291906138e9565b60405180910390a1859650610f0c565b87826002815181101515610cfe57fe5b906020019060200201511215610d78577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95507f7fb582f9fa6ce8e095b0bf28d0d61a3b104c418ce55e31d8184f2626fb569647868c8c8c8c604051610d689594939291906138e9565b60405180910390a1859650610f0c565b610d828b8961223c565b8092508196505050600085141515610dfe577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc95507f7fb582f9fa6ce8e095b0bf28d0d61a3b104c418ce55e31d8184f2626fb569647868c8c8c8c604051610dee9594939291906138e9565b60405180910390a1859650610f0c565b610e2a8a8a610e24866001815181101515610e1557fe5b90602001906020020151611d05565b8b6110ed565b9450600085141515610ea0577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd95507f7fb582f9fa6ce8e095b0bf28d0d61a3b104c418ce55e31d8184f2626fb569647868c8c8c8c604051610e909594939291906138e9565b60405180910390a1859650610f0c565b610ec9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b7f7fb582f9fa6ce8e095b0bf28d0d61a3b104c418ce55e31d8184f2626fb569647868c8c8c8c604051610f009594939291906138e9565b60405180910390a18596505b505050505050949350505050565b60008060008060008093506110019250610f32612f26565b91508173ffffffffffffffffffffffffffffffffffffffff166328bb2117878473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610fb557600080fd5b505af1158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fed9190810190613127565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161102692919061398e565b602060405180830381600087803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061107891908101906131cb565b90506001811415156110a8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93505b7fab2aff3093835aaf2ce420b45a96323fd1ed3041b5c0a822ad2592a4a326563184876040516110d9929190613828565b60405180910390a183945050505050919050565b600080600060608060008060008096506000955060026040519080825280602002602001820160405280156111315781602001602082028038833980820191505090505b50945060036040519080825280602002602001820160405280156111645781602001602082028038833980820191505090505b5093506111708c611680565b8096508195505050600084600081518110151561118957fe5b9060200190602002015114151561160b576111a2612f26565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561120857600080fd5b505af115801561121c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112409190810190613179565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112979190613a7a565b600060405180830381600087803b1580156112b157600080fd5b505af11580156112c5573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161131e9190613c35565b600060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113a59190613b3d565b600060405180830381600087803b1580156113bf57600080fd5b505af11580156113d3573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161142c9190613be7565b600060405180830381600087803b15801561144657600080fd5b505af115801561145a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba748a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114b39190613aef565b600060405180830381600087803b1580156114cd57600080fd5b505af11580156114e1573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368d846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161153c9291906139be565b602060405180830381600087803b15801561155657600080fd5b505af115801561156a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061158e91908101906131cb565b905060018114156115e2576115a48a8c8b6102c6565b95506000861415156115d8577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd96506115dd565b600096505b611606565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b61162f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96505b7f6f7433dcae9c6980545ba89cb4c5ea088268be8603df940d6caa11a3ac888a45878d8d8d8d6040516116669594939291906138e9565b60405180910390a186975050505050505050949350505050565b6060806000806060806000611693612f26565b94508473ffffffffffffffffffffffffffffffffffffffff1663e8434e39898773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561171657600080fd5b505af115801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061174e9190810190613127565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161178792919061398e565b602060405180830381600087803b1580156117a157600080fd5b505af11580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117d99190810190613150565b9350600360405190808252806020026020018201604052801561180b5781602001602082028038833980820191505090505b509250600260405190808252806020026020018201604052801561183e5781602001602082028038833980820191505090505b5091508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156118a557600080fd5b505af11580156118b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118dd91908101906131cb565b6000141561192e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83600081518110151561191557fe5b9060200190602002018181525050828296509650611cfb565b8373ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119849190613951565b602060405180830381600087803b15801561199e57600080fd5b505af11580156119b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119d69190810190613179565b90508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a2b90613bc7565b602060405180830381600087803b158015611a4557600080fd5b505af1158015611a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a7d91908101906131cb565b836001815181101515611a8c57fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611aed90613acf565b602060405180830381600087803b158015611b0757600080fd5b505af1158015611b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b3f91908101906131cb565b836002815181101515611b4e57fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611baf90613c15565b602060405180830381600087803b158015611bc957600080fd5b505af1158015611bdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c0191908101906130fe565b826000815181101515611c1057fe5b9060200190602002019060001916908160001916815250508073ffffffff","ffffffffffffffffffffffffffffffff166327314f796040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c7b90613b1d565b602060405180830381600087803b158015611c9557600080fd5b505af1158015611ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ccd91908101906130fe565b826001815181101515611cdc57fe5b9060200190602002019060001916908160001916815250508282965096505b5050505050915091565b6060806000806000606060206040519080825280601f01601f191660200182016040528015611d435781602001602082028038833980820191505090505b50945060009350600092505b6020831015611e0d578260080260020a876001900402600102915060007f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515611e0057818585815181101515611dc757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535083806001019450505b8280600101935050611d4f565b836040519080825280601f01601f191660200182016040528015611e405781602001602082028038833980820191505090505b509050600092505b83831015611ef4578483815181101515611e5e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028184815181101515611eb757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508280600101935050611e48565b8095505050505050919050565b60008060008060008060008095506000945060009350611f2089612adc565b80955081965050506000851415156121ce57611f3a612e6d565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611fa057600080fd5b505af1158015611fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611fd89190810190613179565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161202f9190613b72565b600060405180830381600087803b15801561204957600080fd5b505af115801561205d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120b69190613a4c565b600060405180830381600087803b1580156120d057600080fd5b505af11580156120e4573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368a846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161213f9291906139be565b602060405180830381600087803b15801561215957600080fd5b505af115801561216d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061219191908101906131cb565b905060018114156121a557600095506121c9565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95505b6121f2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b7fc80814306a567881c5c316a4db1321b1f7c3d59f2c0c3baa0dd2013cdef90f34868a8a60405161222593929190613858565b60405180910390a185965050505050505092915050565b60006060600060608060606000806000806000975060026040519080825280602002602001820160405280156122815781602001602082028038833980820191505090505b50965060036040519080825280602002602001820160405280156122b45781602001602082028038833980820191505090505b50955060026040519080825280602002602001820160405280156122ec57816020015b60608152602001906001900390816122d75790505b5094506122f88c611680565b809850819750505061232187600081518110151561231257fe5b90602001906020020151611d05565b85600081518110151561233057fe5b9060200190602002018190525061235e87600181518110151561234f57fe5b90602001906020020151611d05565b85600181518110151561236d57fe5b90602001906020020181905250600086600081518110151561238b57fe5b906020019060200201511415612a67578a8660028151811015156123ab57fe5b906020019060200201511215612424577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe97507f93b7fdfdc63f1dfb3aa65f0b61c9e7c9c3628bf8d53cfcf05d7d49a23c7696d7888d8d60405161241193929190613858565b60405180910390a1878599509950612acd565b61242c612f26565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561249257600080fd5b505af11580156124a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124ca9190810190613179565b92508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125219190613a7a565b600060405180830381600087803b15801561253b57600080fd5b505af115801561254f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b51661259089600081518110151561258157fe5b90602001906020020151611d05565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125c89190613c35565b600060405180830381600087803b1580156125e257600080fd5b505af11580156125f6573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b51661263789600181518110151561262857fe5b90602001906020020151611d05565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161266f9190613b3d565b600060405180830381600087803b15801561268957600080fd5b505af115801561269d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748760018151811015156126cc57fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161270e9190613be7565b600060405180830381600087803b15801561272857600080fd5b505af115801561273c573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba748c88600281518110151561276c57fe5b90602001906020020151036040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127af9190613aef565b600060405180830381600087803b1580156127c957600080fd5b505af11580156127dd573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18d858773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561286357600080fd5b505af1158015612877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061289b9190810190613127565b6040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128d5939291906139ee565b602060405180830381600087803b1580156128ef57600080fd5b505af1158015612903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061292791908101906131cb565b915060018214151561299c577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd97507f93b7fdfdc63f1dfb3aa65f0b61c9e7c9c3628bf8d53cfcf05d7d49a23c7696d7888d8d60405161298993929190613858565b60405180910390a1878599509950612acd565b6129e76129c08860008151811015156129b157fe5b90602001906020020151611d05565b6129e18960018151811015156129d257fe5b90602001906020020151611d05565b8d6102c6565b9050600081141515612a5e57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd80197507f93b7fdfdc63f1dfb3aa65f0b61c9e7c9c3628bf8d53cfcf05d7d49a23c7696d7888d8d604051612a4b93929190613858565b60405180910390a1878599509950612acd565b60009750612a8b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff97505b7f93b7fdfdc63f1dfb3aa65f0b61c9e7c9c3628bf8d53cfcf05d7d49a23c7696d7888d8d604051612abe93929190613858565b60405180910390a18785995099505b50505050505050509250929050565b600080600080600080612aed612e6d565b93508373ffffffffffffffffffffffffffffffffffffffff1663e8434e39888673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612b7057600080fd5b505af1158015612b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ba89190810190613127565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612be192919061398e565b602060405180830381600087803b158015612bfb57600080fd5b505af1158015612c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c339190810190","613150565b9250600091508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612c9d57600080fd5b505af1158015612cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612cd591908101906131cb565b60001415612d0b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8281915095509550612e64565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d619190613951565b602060405180830381600087803b158015612d7b57600080fd5b505af1158015612d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612db39190810190613179565b905060008173ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e0a90613a2c565b602060405180830381600087803b158015612e2457600080fd5b505af1158015612e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e5c91908101906131cb565b819150955095505b50505050915091565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612eca90613ba7565b602060405180830381600087803b158015612ee457600080fd5b505af1158015612ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f1c91908101906131a2565b9050809250505090565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612f8390613aaf565b602060405180830381600087803b158015612f9d57600080fd5b505af1158015612fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612fd591908101906131a2565b9050809250505090565b6000612feb8235613d7c565b905092915050565b6000612fff8251613d7c565b905092915050565b60006130138251613d86565b905092915050565b60006130278251613d98565b905092915050565b600061303b8251613daa565b905092915050565b600061304f8251613dbc565b905092915050565b60006130638235613dce565b905092915050565b60006130778251613dce565b905092915050565b600082601f830112151561309257600080fd5b81356130a56130a082613c97565b613c6a565b915080825260208301602083018583830111156130c157600080fd5b6130cc838284613e0e565b50505092915050565b6000602082840312156130e757600080fd5b60006130f584828501612fdf565b91505092915050565b60006020828403121561311057600080fd5b600061311e84828501612ff3565b91505092915050565b60006020828403121561313957600080fd5b600061314784828501613007565b91505092915050565b60006020828403121561316257600080fd5b60006131708482850161301b565b91505092915050565b60006020828403121561318b57600080fd5b60006131998482850161302f565b91505092915050565b6000602082840312156131b457600080fd5b60006131c284828501613043565b91505092915050565b6000602082840312156131dd57600080fd5b60006131eb8482850161306b565b91505092915050565b60006020828403121561320657600080fd5b600082013567ffffffffffffffff81111561322057600080fd5b61322c8482850161307f565b91505092915050565b6000806040838503121561324857600080fd5b600083013567ffffffffffffffff81111561326257600080fd5b61326e8582860161307f565b925050602061327f85828601613057565b9150509250929050565b60008060006060848603121561329e57600080fd5b600084013567ffffffffffffffff8111156132b857600080fd5b6132c48682870161307f565b935050602084013567ffffffffffffffff8111156132e157600080fd5b6132ed8682870161307f565b92505060406132fe86828701613057565b9150509250925092565b6000806000806080858703121561331e57600080fd5b600085013567ffffffffffffffff81111561333857600080fd5b6133448782880161307f565b945050602085013567ffffffffffffffff81111561336157600080fd5b61336d8782880161307f565b935050604085013567ffffffffffffffff81111561338a57600080fd5b6133968782880161307f565b92505060606133a787828801613057565b91505092959194509250565b60006133be82613cea565b8084526020840193506133d083613cc3565b60005b82811015613402576133e68683516134d7565b6133ef82613d21565b91506020860195506001810190506133d3565b50849250505092915050565b600061341982613cf5565b80845260208401935061342b83613cd0565b60005b8281101561345d57613441868351613504565b61344a82613d2e565b915060208601955060018101905061342e565b50849250505092915050565b600061347482613d00565b8084526020840193508360208202850161348d85613cdd565b60005b848110156134c65783830388526134a8838351613558565b92506134b382613d3b565b9150602088019750600181019050613490565b508196508694505050505092915050565b6134e081613d68565b82525050565b6134ef81613dd8565b82525050565b6134fe81613dea565b82525050565b61350d81613d72565b82525050565b61351c81613dfc565b82525050565b600061352d82613d16565b808452613541816020860160208601613e1d565b61354a81613e50565b602085010191505092915050565b600061356382613d0b565b808452613577816020860160208601613e1d565b61358081613e50565b602085010191505092915050565b6000600b82527f61737365745f76616c75650000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600d82527f745f7472616e73616374696f6e000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f73746174757300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f61636332000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f6163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f745f6173736574000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f6d6f6e65790000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f61636331000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006040820190508181036000830152613797818561340e565b905081810360208301526137ab81846133b3565b90509392505050565b60006020820190506137c96000830184613504565b92915050565b60006040820190506137e46000830185613504565b81810360208301526137f68184613469565b90509392505050565b60006040820190506138146000830185613504565b6138216020830184613504565b9392505050565b600060408201905061383d6000830185613504565b818103602083015261384f8184613522565b90509392505050565b600060608201905061386d6000830186613504565b818103602083015261387f8185613522565b905061388e6040830184613504565b949350505050565b60006080820190506138ab6000830187613504565b81810360208301526138bd8186613522565b905081810360408301526138d18185613522565b90506138e06060830184613504565b95945050505050565b600060a0820190506138fe6000830188613504565b81810360208301526139108187613522565b905081810360408301526139248186613522565b905081810360608301526139388185613522565b90506139476080830184613504565b9695505050505050565b60006020820190506139666000830184613513565b92915050565b600060208201905081810360008301526139868184613522565b905092915050565b600060408201905081810360008301526139a88185613522565b90506139b760208301846134e6565b9392505050565b600060408201905081810360008301526139d88185613522565b90506139e760208301846134f5565b9392505050565b60006060820190508181036000830152613a088186613522565b9050613a1760208301856134f5565b613a2460408301846134e6565b949350505050565b60006020820190508181036000830152613a458161358e565b9050919050565b60006040820190508181036000830152613a658161358e565b9050613a746020830184613504565b92915050565b60006040820190508181036000830152613a93816135c5565b90508181036020830152613aa78184613522565b905092915050565b60006020820190508181036000830152613ac8816135fc565b9050919050565b60006020820190508181036000830152613ae881613633565b9050919050565b60006040820190508181036000830152613b0881613633565b9050613b176020830184613504565b92915050565b60006020820190508181036000830152613b368161366a565b9050919050565b60006040820190508181036000830152613b568161366a565b90508181036020830152613b6a8184613522565b905092915050565b60006040820190508181036000830152613b8b816136a1565b90508181036020830152613b9f8184613522565b905092915050565b60006020820190508181036000830152613bc0816136d8565b9050919050565b60006020820190508181036000830152613be08161370f565b9050919050565b60006040820190508181036000830152613c008161370f565b9050613c0f6020830184613504565b92915050565b60006020820190508181036000830152613c2e81613746565b","9050919050565b60006040820190508181036000830152613c4e81613746565b90508181036020830152613c628184613522565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715613c8d57600080fd5b8060405250919050565b600067ffffffffffffffff821115613cae57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000613d9182613d48565b9050919050565b6000613da382613d48565b9050919050565b6000613db582613d48565b9050919050565b6000613dc782613d48565b9050919050565b6000819050919050565b6000613de382613d48565b9050919050565b6000613df582613d48565b9050919050565b6000613e0782613d72565b9050919050565b82818337600083830152505050565b60005b83811015613e3b578082015181840152602081019050613e20565b83811115613e4a576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058209bafc7e26322e8b0335a2a8b6d034236befc649b060886e1ed37a634b01e3aab6c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506200002b62000031640100000000026401000000009004565b620003c1565b600061100190508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200008d906200031f565b602060405180830381600087803b158015620000a857600080fd5b505af1158015620000bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620000e39190810190620001a9565b508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000139906200036b565b602060405180830381600087803b1580156200015457600080fd5b505af115801562000169573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506200018f9190810190620001a9565b5050565b6000620001a18251620003b7565b905092915050565b600060208284031215620001bc57600080fd5b6000620001cc8482850162000193565b91505092915050565b6000600b82527f61737365745f76616c75650000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f745f6173736574000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601982527f616363312c20616363322c206d6f6e65792c20737461747573000000000000006020830152604082019050919050565b6000600d82527f745f7472616e73616374696f6e000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f6163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060608201905081810360008301526200033a816200020c565b905081810360208301526200034f81620002b1565b905081810360408301526200036481620001d5565b9050919050565b6000606082019050818103600083015262000386816200027a565b905081810360208301526200039b81620002e8565b90508181036040830152620003b08162000243565b9050919050565b6000819050919050565b613e9b80620003d16000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635b325d781461009e57806360f6b3b5146100dc578063b5fcafc01461011a578063bbd51fb014610157578063bda35fde14610194578063cf5b1a01146101d1578063de8bd8381461020e578063eb8aa2c41461024c578063f40f991014610289575b600080fd5b3480156100aa57600080fd5b506100c560048036036100c091908101906131f4565b6102c6565b6040516100d39291906137ff565b60405180910390f35b3480156100e857600080fd5b5061010360048036036100fe91908101906131f4565b610657565b60405161011192919061377d565b60405180910390f35b34801561012657600080fd5b50610141600480360361013c9190810190613308565b610cdc565b60405161014e91906137b4565b60405180910390f35b34801561016357600080fd5b5061017e60048036036101799190810190613235565b611074565b60405161018b91906137b4565b60405180910390f35b3480156101a057600080fd5b506101bb60048036036101b691908101906130d5565b6113af565b6040516101c8919061396c565b60405180910390f35b3480156101dd57600080fd5b506101f860048036036101f39190810190613289565b6115ab565b60405161020591906137b4565b60405180910390f35b34801561021a57600080fd5b5061023560048036036102309190810190613235565b611e67565b6040516102439291906137cf565b60405180910390f35b34801561025857600080fd5b50610273600480360361026e9190810190613308565b612707565b60405161028091906137b4565b60405180910390f35b34801561029557600080fd5b506102b060048036036102ab91908101906131f4565b612c9a565b6040516102bd91906137b4565b60405180910390f35b6000806000806000806102d7612e6d565b93508373ffffffffffffffffffffffffffffffffffffffff1663d8ac5957888673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561035a57600080fd5b505af115801561036e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103929190810190613127565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103cb92919061398e565b602060405180830381600087803b1580156103e557600080fd5b505af11580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061041d9190810190613150565b9250600091508273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561048757600080fd5b505af115801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104bf91908101906131cb565b600014156104f5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828191509550955061064e565b8273ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161054b9190613951565b602060405180830381600087803b15801561056557600080fd5b505af1158015610579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061059d9190810190613179565b905060008173ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105f490613a2c565b602060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061064691908101906131cb565b819150955095505b50505050915091565b606080600080606080600061066a612f26565b94508473ffffffffffffffffffffffffffffffffffffffff1663d8ac5957898773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156106ed57600080fd5b505af1158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107259190810190613127565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161075e92919061398e565b602060405180830381600087803b15801561077857600080fd5b505af115801561078c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107b09190810190613150565b935060036040519080825280602002602001820160405280156107e25781602001602082028038833980820191505090505b50925060026040519080825280602002602001820160405280156108155781602001602082028038833980820191505090505b5091508373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561087c57600080fd5b505af1158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108b491908101906131cb565b60001415610905577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360008151811015156108ec57fe5b9060200190602002018181525050828296509650610cd2565b8373ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161095b9190613951565b602060405180830381600087803b15801561097557600080fd5b505af1158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109ad9190810190613179565b90508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a0290613b79565b602060405180830381600087803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a5491908101906131cb565b836001815181101515610a6357fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ac490613bc7565b602060405180830381600087803b158015610ade57600080fd5b505af1158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b1691908101906131cb565b836002815181101515610b2557fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff1663fdebe4146040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b8690613c15565b602060405180830381600087803b158015610ba057600080fd5b505af1158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bd891908101906130fe565b826000815181101515610be757fe5b9060200190602002019060001916908160001916815250508073ffffffffffffffffffffffffffffffffffffffff1663fdebe4146040518163ffffffff167c0100000000000000","000000000000000000000000000000000000000000028152600401610c5290613b24565b602060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ca491908101906130fe565b826001815181101515610cb357fe5b9060200190602002019060001916908160001916815250508282965096505b5050505050915091565b60008060008060608060606000955060009450600093506002604051908082528060200260200182016040528015610d235781602001602082028038833980820191505090505b5092506003604051908082528060200260200182016040528015610d565781602001602082028038833980820191505090505b5091506002604051908082528060200260200182016040528015610d8e57816020015b6060815260200190600190039081610d795790505b509050610d9a8b610657565b80945081935050506000826000815181101515610db357fe5b906020019060200201511415610fff57610dcc896102c6565b8095508196505050600085141515610e48577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb95507f6dd02947060ffe1e5c225289a7addb667f0025871cbeb02f62fb9913d9bf9e75868c8c8c8c604051610e389594939291906138e9565b60405180910390a1859650611066565b87826002815181101515610e5857fe5b906020019060200201511215610ed2577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95507f6dd02947060ffe1e5c225289a7addb667f0025871cbeb02f62fb9913d9bf9e75868c8c8c8c604051610ec29594939291906138e9565b60405180910390a1859650611066565b610edc8b89611e67565b8092508196505050600085141515610f58577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc95507f6dd02947060ffe1e5c225289a7addb667f0025871cbeb02f62fb9913d9bf9e75868c8c8c8c604051610f489594939291906138e9565b60405180910390a1859650611066565b610f848a8a610f7e866001815181101515610f6f57fe5b906020019060200201516113af565b8b612707565b9450600085141515610ffa577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd95507f6dd02947060ffe1e5c225289a7addb667f0025871cbeb02f62fb9913d9bf9e75868c8c8c8c604051610fea9594939291906138e9565b60405180910390a1859650611066565b611023565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b7f6dd02947060ffe1e5c225289a7addb667f0025871cbeb02f62fb9913d9bf9e75868c8c8c8c60405161105a9594939291906138e9565b60405180910390a18596505b505050505050949350505050565b60008060008060008060008095506000945060009350611093896102c6565b8095508196505050600085141515611341576110ad612e6d565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561111357600080fd5b505af1158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061114b9190810190613179565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111a29190613aba565b600060405180830381600087803b1580156111bc57600080fd5b505af11580156111d0573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def42698896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112299190613a4c565b600060405180830381600087803b15801561124357600080fd5b505af1158015611257573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08a846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112b29291906139be565b602060405180830381600087803b1580156112cc57600080fd5b505af11580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061130491908101906131cb565b90506001811415611318576000955061133c565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95505b611365565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b7f5cfaad425f027a82d4b8b23c1b6bcd52ffb72a443651e5bc7006623c0745a5b8868a8a60405161139893929190613858565b60405180910390a185965050505050505092915050565b6060806000806000606060206040519080825280601f01601f1916602001820160405280156113ed5781602001602082028038833980820191505090505b50945060009350600092505b60208310156114b7578260080260020a876001900402600102915060007f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415156114aa5781858581518110151561147157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535083806001019450505b82806001019350506113f9565b836040519080825280601f01601f1916602001820160405280156114ea5781602001602082028038833980820191505090505b509050600092505b8383101561159e57848381518110151561150857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002818481518110151561156157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082806001019350506114f2565b8095505050505050919050565b60008060008060008060008060008097506000965060009550600094506115d18c6102c6565b809750819850505060008714151561164b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff97507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d60405161163b9493929190613896565b60405180910390a1879850611e58565b6116548b6102c6565b80965081985050506000871415156116ce577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe97507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d6040516116be9493929190613896565b60405180910390a1879850611e58565b8986121561173e577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd97507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d60405161172e9493929190613896565b60405180910390a1879850611e58565b848a860112156117b0577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc97507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d6040516117a09493929190613896565b60405180910390a1879850611e58565b6117b8612e6d565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561181e57600080fd5b505af1158015611832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118569190810190613179565b92508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118ad9190613aba565b600060405180830381600087803b1580156118c757600080fd5b505af11580156118db573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663def426988b88036040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119369190613a4c565b600060405180830381600087803b15801561195057600080fd5b505af1158015611964573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68d858773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156119ea57600080fd5b505af11580156119fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a229190810190613127565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a5c939291906139ee565b602060405180830381600087803b158015611a7657600080fd5b505af1158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611aae91908101906131cb565b9150600182141515611b22577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb97507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d604051611b129493929190613896565b60405180910390a1879850611e58565b8373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611b8657600080fd5b505af1158015611b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bbe9190810190613179565b90508073ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c159190613aba565b600060405180830381600087803b158015611c2f57600080fd","5b505af1158015611c43573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def426988b87016040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c9e9190613a4c565b600060405180830381600087803b158015611cb857600080fd5b505af1158015611ccc573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68c838773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d5257600080fd5b505af1158015611d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d8a9190810190613127565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611dc4939291906139ee565b602060405180830381600087803b158015611dde57600080fd5b505af1158015611df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e1691908101906131cb565b507f5fb7da862494e68d68b5151b693fe72c06321133bcb29d454612900e71bfc7cf888d8d8d604051611e4c9493929190613896565b60405180910390a18798505b50505050505050509392505050565b6000606060006060806060600080600080600097506002604051908082528060200260200182016040528015611eac5781602001602082028038833980820191505090505b5096506003604051908082528060200260200182016040528015611edf5781602001602082028038833980820191505090505b5095506002604051908082528060200260200182016040528015611f1757816020015b6060815260200190600190039081611f025790505b509450611f238c610657565b8098508197505050611f4c876000815181101515611f3d57fe5b906020019060200201516113af565b856000815181101515611f5b57fe5b90602001906020020181905250611f89876001815181101515611f7a57fe5b906020019060200201516113af565b856001815181101515611f9857fe5b906020019060200201819052506000866000815181101515611fb657fe5b906020019060200201511415612692578a866002815181101515611fd657fe5b90602001906020020151121561204f577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe97507f78378154ce3a6ad60630885faa062df814d89394a159ce5282addf84086033c0888d8d60405161203c93929190613858565b60405180910390a18785995099506126f8565b612057612f26565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156120bd57600080fd5b505af11580156120d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120f59190810190613179565b92508273ffffffffffffffffffffffffffffffffffffffff16631a391cb48d6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161214c9190613aef565b600060405180830381600087803b15801561216657600080fd5b505af115801561217a573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb46121bb8960008151811015156121ac57fe5b906020019060200201516113af565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121f39190613c35565b600060405180830381600087803b15801561220d57600080fd5b505af1158015612221573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb461226289600181518110151561225357fe5b906020019060200201516113af565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161229a9190613b44565b600060405180830381600087803b1580156122b457600080fd5b505af11580156122c8573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663def426988760018151811015156122f757fe5b906020019060200201516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123399190613b99565b600060405180830381600087803b15801561235357600080fd5b505af1158015612367573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663def426988c88600281518110151561239757fe5b90602001906020020151036040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123da9190613be7565b600060405180830381600087803b1580156123f457600080fd5b505af1158015612408573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68d858773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561248e57600080fd5b505af11580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124c69190810190613127565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612500939291906139ee565b602060405180830381600087803b15801561251a57600080fd5b505af115801561252e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061255291908101906131cb565b91506001821415156125c7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd97507f78378154ce3a6ad60630885faa062df814d89394a159ce5282addf84086033c0888d8d6040516125b493929190613858565b60405180910390a18785995099506126f8565b6126126125eb8860008151811015156125dc57fe5b906020019060200201516113af565b61260c8960018151811015156125fd57fe5b906020019060200201516113af565b8d6115ab565b905060008114151561268957807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd80197507f78378154ce3a6ad60630885faa062df814d89394a159ce5282addf84086033c0888d8d60405161267693929190613858565b60405180910390a18785995099506126f8565b600097506126b6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff97505b7f78378154ce3a6ad60630885faa062df814d89394a159ce5282addf84086033c0888d8d6040516126e993929190613858565b60405180910390a18785995099505b50505050505050509250929050565b6000806000606080600080600080965060009550600260405190808252806020026020018201604052801561274b5781602001602082028038833980820191505090505b509450600360405190808252806020026020018201604052801561277e5781602001602082028038833980820191505090505b50935061278a8c610657565b809650819550505060008460008151811015156127a357fe5b90602001906020020151141515612c25576127bc612f26565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561282257600080fd5b505af1158015612836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061285a9190810190613179565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128b19190613aef565b600060405180830381600087803b1580156128cb57600080fd5b505af11580156128df573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129389190613c35565b600060405180830381600087803b15801561295257600080fd5b505af1158015612966573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129bf9190613b44565b600060405180830381600087803b1580156129d957600080fd5b505af11580156129ed573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def426988a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a469190613b99565b600060405180830381600087803b158015612a6057600080fd5b505af1158015612a74573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def426988a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612acd9190613be7565b600060405180830381600087803b158015612ae757600080fd5b505af1158015612afb573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08d846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b569291906139be565b602060405180830381600087803b158015612b7057600080fd5b505af1158015612b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ba891908101906131cb565b90506001811415612bfc57612bbe8a8c8b6115ab565b9550600086141515612bf2577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9650612bf7565b600096505b612c20565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b612c49565b7fffffffffffffffff","","9050919050565b60006040820190508181036000830152613c4e81613746565b90508181036020830152613c628184613522565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715613c8d57600080fd5b8060405250919050565b600067ffffffffffffffff821115613cae57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000613d9182613d48565b9050919050565b6000613da382613d48565b9050919050565b6000613db582613d48565b9050919050565b6000613dc782613d48565b9050919050565b6000819050919050565b6000613de382613d48565b9050919050565b6000613df582613d48565b9050919050565b6000613e0782613d72565b9050919050565b82818337600083830152505050565b60005b83811015613e3b578082015181840152602081019050613e20565b83811115613e4a576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058202b2bea26e6a677d1a9811677433513cc3ee631d859c19cba458fdf555ec65f816c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"from_account\",\"type\":\"string\"},{\"name\":\"to_account\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"old_id\",\"type\":\"string\"},{\"name\":\"new_id\",\"type\":\"string\"},{\"name\":\"acc\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"splitTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"removeTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"acc1\",\"type\":\"string\"},{\"name\":\"acc2\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"addTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"select_transaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"byte32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"updateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"asset_value\",\"type\":\"int256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"acc1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"acc2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"AddTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"UpdateTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"old_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"new_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"acc\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"SplitTransactionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"RemoveTransactionEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_SPLITTRANSACTION = "splitTransaction";

    public static final String FUNC_REMOVETRANSACTION = "removeTransaction";

    public static final String FUNC_ADDTRANSACTION = "addTransaction";

    public static final String FUNC_SELECT_TRANSACTION = "select_transaction";

    public static final String FUNC_BYTE32TOSTRING = "byte32ToString";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_UPDATETRANSACTION = "updateTransaction";

    public static final String FUNC_SELECT = "select";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event ADDTRANSACTIONEVENT_EVENT = new Event("AddTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATETRANSACTIONEVENT_EVENT = new Event("UpdateTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event SPLITTRANSACTIONEVENT_EVENT = new Event("SplitTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVETRANSACTIONEVENT_EVENT = new Event("RemoveTransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Account(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt transfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transfer(String from_account, String to_account, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(from_account), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(to_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt splitTransaction(String old_id, String new_id, String acc, BigInteger money) {
        final Function function = new Function(
                FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void splitTransaction(String old_id, String new_id, String acc, BigInteger money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSplitTransaction(String old_id, String new_id, String acc, BigInteger money) {
        final Function function = new Function(
                FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getSplitTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getSplitTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SPLITTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeTransaction(String id) {
        final Function function = new Function(
                FUNC_REMOVETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeTransaction(String id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveTransaction(String id) {
        final Function function = new Function(
                FUNC_REMOVETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVETRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVETRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt addTransaction(String id, String acc1, String acc2, BigInteger money) {
        final Function function = new Function(
                FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc1), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc2), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addTransaction(String id, String acc1, String acc2, BigInteger money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc1), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc2), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddTransaction(String id, String acc1, String acc2, BigInteger money) {
        final Function function = new Function(
                FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc1), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acc2), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getAddTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getAddTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDTRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<List<BigInteger>, List<byte[]>> select_transaction(String id) throws ContractException {
        final Function function = new Function(FUNC_SELECT_TRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Int256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, List<byte[]>>(
                convertToNative((List<Int256>) results.get(0).getValue()), 
                convertToNative((List<Bytes32>) results.get(1).getValue()));
    }

    public String byte32ToString(byte[] x) throws ContractException {
        final Function function = new Function(FUNC_BYTE32TOSTRING, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt register(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String account, BigInteger asset_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(asset_value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateTransaction(String id, BigInteger money) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateTransaction(String id, BigInteger money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateTransaction(String id, BigInteger money) {
        final Function function = new Function(
                FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateTransactionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, List<String>> getUpdateTransactionOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATETRANSACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, List<String>>(

                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue())
                );
    }

    public Tuple2<BigInteger, BigInteger> select(String account) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.asset_value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from_account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to_account = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddTransactionEventEventResponse> getAddTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDTRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<AddTransactionEventEventResponse> responses = new ArrayList<AddTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddTransactionEventEventResponse typedResponse = new AddTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.acc1 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.acc2 = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateTransactionEventEventResponse> getUpdateTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATETRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateTransactionEventEventResponse> responses = new ArrayList<UpdateTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateTransactionEventEventResponse typedResponse = new UpdateTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATETRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATETRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SplitTransactionEventEventResponse> getSplitTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SPLITTRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<SplitTransactionEventEventResponse> responses = new ArrayList<SplitTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SplitTransactionEventEventResponse typedResponse = new SplitTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.old_id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.new_id = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.acc = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.money = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSplitTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SPLITTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSplitTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SPLITTRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveTransactionEventEventResponse> getRemoveTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVETRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<RemoveTransactionEventEventResponse> responses = new ArrayList<RemoveTransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveTransactionEventEventResponse typedResponse = new RemoveTransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveTransactionEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVETRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveTransactionEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVETRANSACTIONEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Account load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Account(contractAddress, client, credential);
    }

    public static Account deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Account.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String account;

        public BigInteger asset_value;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String from_account;

        public String to_account;

        public BigInteger amount;
    }

    public static class AddTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String id;

        public String acc1;

        public String acc2;

        public BigInteger money;
    }

    public static class UpdateTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String id;

        public BigInteger money;
    }

    public static class SplitTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String old_id;

        public String new_id;

        public String acc;

        public BigInteger money;
    }

    public static class RemoveTransactionEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String id;
    }
}
